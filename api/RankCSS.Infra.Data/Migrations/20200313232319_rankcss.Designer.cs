// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RankCSS.Infra.Data.EF;

namespace RankCSS.Infra.Data.Migrations
{
    [DbContext(typeof(RankContext))]
    [Migration("20200313232319_rankcss")]
    partial class rankcss
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("RankCSS.Business.Entidades.File", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("blob");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("Processed")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ProcessingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("File");
                });

            modelBuilder.Entity("RankCSS.Business.Entidades.Match", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Map")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ID");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("RankCSS.Business.Entidades.Player", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("RankCSS.Business.Entidades.Round", b =>
                {
                    b.Property<Guid>("PlayerID")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoundID")
                        .HasColumnType("char(36)");

                    b.Property<int>("Death")
                        .HasColumnType("int");

                    b.Property<bool?>("DefusedBomb")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FriendlyFire")
                        .HasColumnType("int");

                    b.Property<int?>("HS")
                        .HasColumnType("int");

                    b.Property<int>("Kill")
                        .HasColumnType("int");

                    b.Property<bool?>("PlantedBomb")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PlayerID", "RoundID");

                    b.HasIndex("RoundID");

                    b.ToTable("Round");
                });

            modelBuilder.Entity("RankCSS.Business.Entidades.Round", b =>
                {
                    b.HasOne("RankCSS.Business.Entidades.Player", "Player")
                        .WithMany("Rounds")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RankCSS.Business.Entidades.Match", "Partida")
                        .WithMany("Rounds")
                        .HasForeignKey("RoundID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
